# Opens in an OS window, either the current working directory, or the object(s) passed as arguments
function o --description='Open a given command as OS-native, or open the current working directory in an os-native browser'
  if test "$argv" = ""
    open $PWD
  else
    open $argv
  end
end

# fish-friendly wrapper around bass/nvm
function nvm
   bass source (brew --prefix nvm)/nvm.sh --no-use ';' nvm $argv
end

function gen-machine-name --description="Generate a semi-ramdon machine name that meets a specific naming pattern"
  pwgen -s1 11 100000 | tr [a-z] [A-Z] | grep '^[^aeiou0-9]{1,1}[aeiou]{1,1}[^aeiou0-9]{1,2}[aeiou]{1}[^aeiou0-9]{1,1}[aeiou]{1,1}[^aeiou0-9]{1,2}[aeiou]{1}' | tail -n 1
end

function cd --description="Change current working directory"
  builtin cd $argv
  emit cwd
end

function __check_cwd --on-event cwd --description="Inject directory specific behaviors on change working directory"
  go-nvm
  go-py
end

function gwtds
  echo (set_color green)"NOTE: Don't forget to base your current branch off of ml"(set_color normal)
  go-tf ds
end

function gwtdev
  go-tf dev2
end

function gwtdev-usw2
  go-tf dev2-usw2
end

function gwtqa
  cd $HOME/src/cleerly-infra-terraform/live-tg/aws/qa/us-east-1/vpc01/qa/_env/
end

function gwtqa-usw2
  cd $HOME/src/cleerly-infra-terraform/live-tg/aws/qa/us-west-2/vpc01/qa-usw2/_env
end

function gwts1
  echo (set_color green)"NOTE: Don't forget to base your current branch off of staging"(set_color normal)
  go-tf staging
end

function gwts2
  echo (set_color green)"NOTE: Don't forget to base your current branch off of staging2"(set_color normal)
  go-tf staging2
end

function gwts2-usw2
  echo (set_color green)"NOTE: Don't forget to base your current branch off of staging2"(set_color normal)
  go-tf-w2 staging2
end

function gwtprod
  echo (set_color green)"NOTE: Don't forget to base your current branch off of prod"(set_color normal)
  go-tf prod
end

function gwtprod-usw2
  echo (set_color green)"NOTE: Don't forget to base your current branch off of prod"(set_color normal)
  go-tf-w2 prod
end

function gwts3
  echo (set_color green)"NOTE: Don't forget to base your current branch off of staging3"(set_color normal)
  go-tf staging3
end

function gwts3-usw2
  echo (set_color green)"NOTE: Don't forget to base your current branch off of staging3"(set_color normal)
  go-tf-w2 staging3
end

function gwtdata
  go-tf data account
end

function gwtmgmt
  cd $HOME/src/cleerly-infra-terraform/live-tg/aws/mgmt/us-east-1/vpc02/mgmt/_env/
end

function gwtbastion
  go-tf bastion account
end

function gwtdemo
  go-tf demo
end

function go-tf-w2 --description="Jump to west2"
  cd ~/src/cleerly-infra-terraform/live-tg/aws/$argv[1]/us-west-2/vpc01/$argv[1]-usw2/_env
end

function go-tf --description="Jump to and activate a Terraform workspace"
  if test "$argv[2]" = ""
    set dir "live-tg"
  else
    set dir "$argv[2]"
  end
  cd ~/src/cleerly-infra-terraform/$dir/aws/$argv[1]/us-east-1/vpc01/$argv[1]/_env
end

function precheck-npm --description="Run pre-commit linting and formatting for node/TypeScript"
  if test -d ".git" 
    prettier --write **/*.ts
    npm run lint:fix
  else
    echo (set_color red)"ERROR: do not run precheck outside of a git repository"(set_color normal)
  end
end

function go-py --description="Deactivate/activate virtual environment on enter and exit" 
  if test "$VIRTUAL_ENV" != ""
    deactivate
  end
  if test -d "venv"
    source venv/bin/activate.fish
  end

  if test -d ".venv"
    source .venv/bin/activate.fish
  end
end

function go-nvm --description="Run Node version manager use on enter / exit"
  if test -e "$PWD/.nvmrc"
    nvm use
  end
end

function sonar-scan --description="Run a Sonar scan from the root of a GitHub repository"
  rm -rf .scannerwork/
  docker run \
          --rm \
          -e SONAR_HOST_URL="$SONAR_HOST" \
          -e SONAR_LOGIN="$SONAR_TOKEN" \
          -e SONAR_SCANNER_OPTS="-Xms1024m -Xmx4096m -Dsonar.verbose=true" \
          -v "$PWD:/usr/src" \
          sonarsource/sonar-scanner-cli
end

function tf-lint --description="Lint changed Terraform files using tf fmt"
  if test -d ".git"
    for file in (git diff --name-only)
      echo "About to run linting on file: $file"
      terraform fmt $file
    end
  else 
    echo (set_color red)"ERROR: only run this terraform fmt helper from the root of a git repository"(set_color normal)
  end
end

function reformat-json --description="Reformats all of your jason"
  for file in (fd '\.json$')
    echo "About to reformat json: $file"
    jq . $file
    if test "$status" -eq 0
      jq . $file | tee $file
    end
  end
end

function gen-key --description="Generates a random 256-bit seed value and prints it as hex"
  if test "$argv" = ""
    set numbytes 32
  else 
    set numbytes "$argv"
  end
  node -e "console.log(Buffer.from(crypto.randomBytes($numbytes)).toString('hex'))"
end

function invoke-lambda --description="Invokes a lambda in a specific AWS environment"
  set environ "$argv[1]"
  set arn "$argv[2]"
  set payload (echo "$argv[3]" | base64)
  aws lambda invoke --function=$arn --payload=$payload --profile=$environ lambda-invoke-(iso-date | sed 's/:/-/g').out
end

function moz-logs
  ecs-logs moz-batch-job $argv
end

function delivery-logs
  ecs-logs hv-delivery-manager-api $argv
end

function labs-logs
  ecs-logs hv-visionlab-api $argv
end

function coronary-logs
  ecs-logs hv-physician-portal-api $argv
end

function ecs-logs --description="tails the Mozart logs in the specific environment"
  set proj "$argv[1]"
  set environ "$argv[2]"
  if test "$environ" = ""
    echo (set_color red)"ERROR: you must specify an environment"(set_color normal)
  end

  echo $argv[3..-1]
  if test "$proj" = ""
    echo (set_color red)"ERROR: you must specify a project"(set_color normal)
  end
  aws logs tail --profile=$environ /cleerly-$environ/ecs/$proj $argv[3..-1]
end

