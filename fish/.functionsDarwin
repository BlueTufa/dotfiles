# Opens in an OS window, either the current working directory, or the object(s) passed as arguments
function o --description="Open a given command as OS-native, or open the current working directory in an os-native browser"
  if test "$argv" = ""
    open $PWD
  else
    open $argv
  end
end

# fish-friendly wrapper around bass/nvm
function nvm
   bass source (brew --prefix nvm)/nvm.sh --no-use ';' nvm $argv
end

function gen-machine-name --description="Generate a semi-ramdon machine name that meets a specific naming pattern"
  pwgen -s1 11 100000 | tr [a-z] [A-Z] | grep '^[^aeiou0-9]{1,1}[aeiou]{1,1}[^aeiou0-9]{1,2}[aeiou]{1}[^aeiou0-9]{1,1}[aeiou]{1,1}[^aeiou0-9]{1,2}[aeiou]{1}' | tail -n 1
end

function cd --description="Change current working directory"
  z $argv
  emit cwd
end

function __check_cwd --on-event cwd --description="Inject directory specific behaviors on change working directory"
  go-nvm
  go-py
  go-env
  go-codeartifact
end

function precheck-npm --description="Run pre-commit linting and formatting for node/TypeScript"
  if test -d ".git" 
    prettier --write **/*.ts
    npm run lint:fix
  else
    echo (set_color red)"ERROR: do not run precheck outside of a git repository"(set_color normal)
  end
end

function env-source
  for line in (cat $argv)
    if string match -rq "^\x*#." $line
      # commment lines are ignored, but print them
      echo $line
    else
       set item (string split -m 1 '=' $line)
       set -gx $item[1] $item[2] > /dev/null 2>&1
       echo "Exported key $item[1]"
    end  
  end
end

function env-up
  # no args, then start in daemon mode
  # else, use whatever args are passed in
  if test "$argv" = ""
    docker-compose build
    docker-compose up
  else
    docker-compose up $argv
  end
end

function env-down
  docker-compose down $argv
end

function go-py --description="Deactivate/activate virtual environment on enter and exit" 
  if test "$VIRTUAL_ENV" != ""
    deactivate
  end
  if test -d "venv"
    source venv/bin/activate.fish
  end

  if test -d ".venv"
    source .venv/bin/activate.fish
  end

  # Pipfile support
  if test -f "Pipfile" && test -f (which pipenv)
    if pipenv --venv -q > /dev/null 2>&1
      source (pipenv --venv -q)/bin/activate.fish
      echo "A pipenv environment was activated.  Running on" (python --version)
    else
      echo "Empty pipenv found.  Run pipenv install --dev to activate it."
    end
  end
  if test -f pyproject.toml; and test -f poetry.lock
    # this is a slight hack.  poetry env use doesn't seem to source fish shell
    source (poetry env use python | sed 's/Using virtualenv\: //g')/bin/activate.fish
  end
end

function go-codeartifact --description="Auto-load code artifact environment variables"
  if test -f codeartifact-login.sh; and test "$AWS_SESSION_TOKEN" != ""
    source ./codeartifact-login.sh
    echo "AWS CODE_ARTIFACT_AUTH_TOKEN was set."
  end
end

function go-env --description="Auto-load .env file contents on enter"
  if test -f .env
    env-source .env
  end
end

function go-nvm --description="Run Node version manager use on enter / exit"
  if test -e "$PWD/.nvmrc" && test -f (which nvm)
    nvm use
  end
end

function sonar-scan --description="Run a Sonar scan from the root of a GitHub repository"
  rm -rf .scannerwork/
  docker run \
          --rm \
          -e SONAR_HOST_URL="$SONAR_HOST" \
          -e SONAR_LOGIN="$SONAR_TOKEN" \
          -e SONAR_SCANNER_OPTS="-Xms1024m -Xmx4096m -Dsonar.verbose=true" \
          -v "$PWD:/usr/src" \
          sonarsource/sonar-scanner-cli
end

function tf-lint --description="Lint changed Terraform files using tf fmt"
  if test -d ".git"
    for file in (git diff --name-only)
      echo "About to run linting on file: $file"
      terraform fmt $file
    end
  else 
    echo (set_color red)"ERROR: only run this terraform fmt helper from the root of a git repository"(set_color normal)
  end
end

function reformat-json --description="Reformats all of your jason"
  for file in (fd '\.json$')
    echo "About to reformat json: $file"
    jq . $file
    if test "$status" -eq 0
      jq . $file | tee $file
    end
  end
end

function gen-key --description="Generates a random 256-bit seed value and prints it as hex"
  if test "$argv" = ""
    set numbytes 32
  else 
    set numbytes "$argv"
  end
  node -e "console.log(Buffer.from(crypto.randomBytes($numbytes)).toString('hex'))"
end

function invoke-lambda --description="Invokes a lambda in a specific AWS environment"
  set environ "$argv[1]"
  set arn "$argv[2]"
  set payload (echo "$argv[3]" | base64)
  aws lambda invoke --function=$arn --payload=$payload --profile=$environ lambda-invoke-(iso-date | sed 's/:/-/g').out
end

function cw-logs --description="tails AWS logs in a specific environment"
  set proj "$argv[1]"
  if test "$proj" = ""
    echo (set_color red)"ERROR: you must specify a project"(set_color normal)
  end

  aws logs tail $proj $argv[2..-1]
end

function run-ecs-task --description="Runs an ECS task"
  set environment "$argv[1]"
  set task_definition "$argv[2..-1]"
  awsume $environment
  set current_account (aws sts get-caller-identity --query "Account" --output text)
  eval "aws ecs run-task --task-definition arn:aws:ecs:$AWS_REGION:$current_account:$task_definition"
end

