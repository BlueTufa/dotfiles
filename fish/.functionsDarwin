# Opens in an OS window, either the current working directory, or the object(s) passed as arguments
function o --description='Open a given command as OS-native, or open the current working directory in an os-native browser'
  if test "$argv" = ""
    open $PWD
  else
    open $argv
  end
end

#   if test "$status" -ne "0"
#     set ARROW "CB0000"
#   else
#     set ARROW 58a82f
#   end
# 
#   echo (set_color 3399FF)(whoami)(set_color $ARROW)@(set_color FF9933)(date -u '+%a %d %H:%M:%S UTC') (set_color 6B6FFF)(pretty_path)(set_color 03A9F4)(get_branch) 
#   set_color 03A9F4
#   echo "\$ "  
#   
#   echo $history[1] | grep -Ev '(^hh$|^sd|^l.$)' >> ~/.local/share/fish/hh.history
#   # also echo fish commands to the bash history
#   # BASH keep this file in memory so it doesn't work quite like you might want it to,
#   # also potential corruption issues (last one appears to win)
#   # echo $history[1] | grep -Ev '(^hh$|^sd|^l.$)' >> ~/.bash_history
# end

# fish-friendly wrapper around bass/nvm
function nvm
   bass source (brew --prefix nvm)/nvm.sh --no-use ';' nvm $argv
end

function gen-machine-name --description="Generate a semi-ramdon machine name that meets a specific naming pattern"
  pwgen -s1 11 100000 | tr [a-z] [A-Z] | grep '^[^aeiou0-9]{1,1}[aeiou]{1,1}[^aeiou0-9]{1,2}[aeiou]{1}[^aeiou0-9]{1,1}[aeiou]{1,1}[^aeiou0-9]{1,2}[aeiou]{1}' | tail -n 1
end

function cd --description="Change current working directory"
  builtin cd $argv
  emit cwd
end

function __check_cwd --on-event cwd --description="Inject directory specific behaviors on change working directory"
  go-nvm
  go-py
end

function gwtdev
  go-tf dev2
end

function gwts2
  echo (set_color green)"NOTE: Don't forget to base your current branch off of staging2"(set_color normal)
  go-tf staging2
end

function gwtprod
  echo (set_color green)"NOTE: Don't forget to base your current branch off of prod"(set_color normal)
  go-tf prod
end

function gwts3
  echo (set_color green)"NOTE: Don't forget to base your current branch off of staging3"(set_color normal)
  go-tf staging3
end

function gwtmgmt
  go-tf mgmt account
end

function gwtbastion
  go-tf bastion account
end

function go-tf --description="Jump to and activate a Terraform workspace"
  if test "$argv[2]" = ""
    set dir "live"
  else
    set dir "$argv[2]"
  end
  cd ~/src/cleerly-infra-terraform/$dir/$argv[1]
  tfenv use
  tf workspace select $argv[1]
end

function precheck-npm --description="Run pre-commit linting and formatting for node/TypeScript"
  if test -d ".git" 
    prettier --write **/*.ts
    npm run lint:fix
  else
    echo (set_color red)"ERROR: do not run precheck outside of a git repository"(set_color normal)
  end
end

function go-py --description="Deactivate/activate virtual environment on enter and exit" 
  if test "$VIRTUAL_ENV" != ""
    deactivate
  end
  if test -d "venv"
    source venv/bin/activate.fish
  end

  if test -d ".venv"
    source .venv/bin/activate.fish
  end
end

function go-nvm --description="Run Node version manager use on enter / exit"
  if test -e "$PWD/.nvmrc"
    nvm use
  end
end

function sonar-scan --description="Run a Sonar scan from the root of a GitHub repository"
  docker run \
          --rm \
          -e SONAR_HOST_URL="$SONAR_HOST" \
          -e SONAR_LOGIN="$SONAR_TOKEN" \
          -e SONAR_SCANNER_OPTS="-Dsonar.verbose=true" \
          -v "$PWD:/usr/src" \
          sonarsource/sonar-scanner-cli
end

function tf-lint --description="Lint changed Terraform files using tf fmt"
  if test -d ".git"
    for file in (git diff --name-only)
      echo "About to run linting on file: $file"
      terraform fmt $file
    end
  else 
    echo (set_color red)"ERROR: only run this terraform fmt helper from the root of a git repository"(set_color normal)
  end
end

function reformat-json --description="Reformats all of your jason"
  for file in (fd '\.json$')
    echo "About to reformat json: $file"
    jq . $file > $file
  end
end

function gen-key --description="Generates a random 256-bit seed value and prints it as hex"
  if test "$argv" = ""
    set numbytes 32
  else 
    set numbytes "$argv"
  end
  node -e "console.log(Buffer.from(crypto.randomBytes($numbytes)).toString('hex'))"
end

