if test (uname -m) = "arm64"
  eval (/opt/homebrew/bin/brew shellenv)
end

set -gx NVM_DIR "$HOME/.nvm"

# if the current system is running macos catalina or higher, use new path
if test (sw_vers -productVersion | grep -E '^(1[1-9]|10.15)')
  set -gx MAC_APP_PATH '/System/Applications'
else
  set -gx MAC_APP_PATH '/Applications'
end

# PyEnv
set -Ux PYENV_ROOT $HOME/.pyenv
set -U fish_user_paths /opt/homebrew/opt/openssl@3/bin $PYENV_ROOT/bin $fish_user_paths $HOME/.local/bin

export LDFLAGS="-L/opt/homebrew/opt/openssl@1.1/lib"
export CPPFLAGS="-I/opt/homebrew/opt/openssl@1.1/include"

pyenv init - | source
starship init fish | source
zoxide init fish | source
docker completion fish | source

set -x AWS_COMPLETER (which aws_completer)
complete --command aws --no-files --arguments '(begin; set --local --export COMP_SHELL fish; set --local --export COMP_LINE (commandline); aws_completer | sed \'s/ $//\'; end)'

# keeping these for the next time I need rust or K8s
# kubectl completion fish | source
# rustup completions fish | source

export VSCODE_SETTINGS="$HOME/Library/Application Support/Code/User/settings.json"

export LDFLAGS="-L$(brew --prefix openssl)/lib"
export CPPFLAGS="-I$(brew --prefix openssl)/include"

# Everything below here kept for historical reasons
# source /opt/homebrew/opt/asdf/libexec/asdf.fish

# I pretty much toggle these back and forth depending on which project I'm working on most
# set -gx JAVA_HOME (/usr/libexec/java_home -v11.0.9.1)
# set -g fish_user_paths "$JAVA_HOME/bin" "/usr/local/sbin" 

# /usr/libexec/java_home -V to list versions
# set -gx JAVA_HOME (/usr/libexec/java_home)
# set -gx JAVA_HOME '/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home'
# set -gx JAVA_HOME (/usr/libexec/java_home -v11.0.11)
# set -gx LIQUIBASE_HOME /usr/local/opt/liquibase/libexec  

